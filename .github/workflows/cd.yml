name: CD

on:
  push:
    branches: [ "develop" ]

jobs:
  deploy-ci:
    runs-on: ubuntu-22.04

    steps:
      - name: 체크아웃
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'

      - name: 빌드
        run: |
          chmod +x gradlew
          ./gradlew build -x test

      - name: docker build 가능하도록 환경 설정
        uses: docker/setup-buildx-action@v2.9.1

      - name: docker hub에로그인
        uses: docker/login-action@v2.2.0
        with:
          username: ${{ secrets.DOCKERHUB_LOGIN_USERNAME }}
          password: ${{ secrets.DOCKERHUB_LOGIN_ACCESSTOKEN }}

      - name: docker image 빌드 및 푸시
        run: |
          docker build --platform linux/amd64 -t histour/histour -f Dockerfile-prod .
          docker push histour/histour

  deploy-cd:
    needs: deploy-ci
    runs-on: ubuntu-20.04

    steps:
      - name: SSH로 서버 접속
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.RELEASE_SERVER_IP }}
          username: ${{ secrets.RELEASE_SERVER_USER }}
          key: ${{ secrets.RELEASE_SERVER_KEY }}
          script: |
            cd ~

      - name: deploy.sh 파일 다운로드
        run: |
          wget https://raw.githubusercontent.com/HisTour/HisTour-Spring/develop/script/deploy.sh -O deploy.sh

      - name: deploy.sh 파일에 실행 권한 부여
        run: |
          chmod +x deploy.sh

      - name: .env 파일 추가
        run: |
          if ! grep -q "SECRET_MANAGER_TOKEN=" .env; then
            echo "SECRET_MANAGER_TOKEN=${{ secrets.SECRET_MANAGER_TOKEN }}" >> .env
          fi
          if ! grep -q "SECRET_MANAGER_WORKSPACE_ID=" .env; then
            echo "SECRET_MANAGER_WORKSPACE_ID=${{ secrets.SECRET_MANAGER_WORKSPACE_ID }}" >> .env
          fi

      - name: 배포 스크립트 실행
        run: |
          sudo ./deploy.sh
